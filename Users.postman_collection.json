{
	"info": {
		"_postman_id": "459f1165-4eeb-4854-a61b-fb1be30e259a",
		"name": "Users",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34610854",
		"_collection_link": "https://projeto-carrefour.postman.co/workspace/Projeto-Carrefour~df017354-8e6b-4037-b925-be12cd69884c/collection/34610854-459f1165-4eeb-4854-a61b-fb1be30e259a?action=share&source=collection_link&creator=34610854"
	},
	"item": [
		{
			"name": "Criar usuário",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verifica se o status code é 201 ou 200\r",
							"pm.test(\"Status code deve ser 201 ou 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});\r",
							"\r",
							"// Só executa o teste do _id se a resposta for válida\r",
							"pm.test(\"Retorno contém id do usuário\", function () {\r",
							"    if (pm.response.code === 201 || pm.response.code === 200) {\r",
							"        let jsonData = pm.response.json();\r",
							"        \r",
							"        // Verifica se jsonData existe e contém a propriedade '_id'\r",
							"        if (jsonData && jsonData._id) {\r",
							"            pm.expect(jsonData).to.have.property('_id');\r",
							"            pm.environment.set(\"userId\", jsonData._id);\r",
							"        } else if (jsonData.data && jsonData.data._id) {\r",
							"            pm.expect(jsonData.data).to.have.property('_id');\r",
							"            pm.environment.set(\"userId\", jsonData.data._id);\r",
							"        } else {\r",
							"            console.warn(\"ID do usuário não encontrado na resposta.\");\r",
							"        }\r",
							"    } else {\r",
							"        console.warn(\"Status de resposta inválido. Teste de ID ignorado.\");\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"nome\": \"Isa\",\r\n  \"email\": \"isa.gomes@gmail.com\",\r\n  \"password\": \"123456\",\r\n  \"administrador\": \"true\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/usuarios",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"usuarios"
					]
				}
			},
			"response": []
		},
		{
			"name": "Listar usuários",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Retorno é uma lista de usuários\", function () {\r",
							"    let jsonData;\r",
							"    try {\r",
							"        jsonData = pm.response.json();\r",
							"    } catch (e) {\r",
							"        console.error(\"Erro ao converter a resposta em JSON:\", e);\r",
							"        return;\r",
							"    }\r",
							"\r",
							"    // Verifica se o JSON tem uma lista de usuários\r",
							"    if (Array.isArray(jsonData.usuarios)) {\r",
							"        pm.expect(jsonData.usuarios).to.be.an('array');\r",
							"    } else if (Array.isArray(jsonData.data)) {\r",
							"        pm.expect(jsonData.data).to.be.an('array');\r",
							"    } else {\r",
							"        console.warn(\"A resposta não contém um array de usuários.\");\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/usuarios/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"usuarios",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Buscar usuários por ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData;\r",
							"\r",
							"pm.test(\"A resposta é um JSON válido\", function () {\r",
							"    jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"pm.test(\"A resposta contém o ID do usuário\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"_id\");\r",
							"    pm.expect(jsonData._id).to.be.a(\"string\").and.not.empty;\r",
							"});\r",
							"\r",
							"// Armazena o ID do usuário no ambiente para uso futuro\r",
							"pm.environment.set(\"userId\", jsonData._id);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/usuarios/Yph5pTnfxOl2BM3R",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"usuarios",
						"Yph5pTnfxOl2BM3R"
					]
				}
			},
			"response": []
		},
		{
			"name": "Atualizar Usuário",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Resposta válida ao atualizar usuário\", function () {\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"    pm.expect(jsonData.mensagem || jsonData.message).to.be.oneOf([\r",
							"        \"Registro alterado com sucesso\",\r",
							"        \"Este email já está sendo usado\"\r",
							"    ]);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"email_unico\", `teste_${Date.now()}@exemplo.com`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"nome\": \"Helena Gomes\",\r\n  \"email\": \"helena.gomes@gmail.com\",\r\n  \"password\": \"123456\",\r\n  \"administrador\": \"true\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/usuarios/{{userId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"usuarios",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Excluir Usuário",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code deve ser 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Usuário excluído com sucesso ou não encontrado\", function () {\r",
							"    var msg = pm.response.json().message;\r",
							"    pm.expect([\"Registro excluído com sucesso\", \"Nenhum registro excluído\"]).to.include(msg);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/usuarios/{{userId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"usuarios",
						"{{userId}}"
					]
				}
			},
			"response": []
		}
	]
}